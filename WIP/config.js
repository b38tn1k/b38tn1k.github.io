let logCounter = 0;

function jlog(classname, label) {
  // console.debug(classname, label);
  // logCounter += 1;
  // if (logCounter == 100) {
  //   console.clear();
  // }

}

var M_IDLE = 0;
var M_MOVE = 1;
var M_RESIZE = 2;
var M_DELETE = 3;
var M_SELECTED = 4;
var M_EXPAND_OR_COLLAPSE = 5;
var M_START = 6;
var M_NEW = 7;
var M_COPY = 8;
var M_MUTATE = 9;

var V_NUMBER = 0;
var V_STRING = 1;
var V_BOOL = 2;

var T_START = 1;
var T_STOP = 0;
var T_COMMENT = 3;
var T_BLOCK = 23;
var T_VAR = 45;
var T_INPUT = 47;
var T_CONST = 46;
var T_IF = 30;
var T_WHILE = 7;
var T_EQUAL = 48;
var T_LESS = 9;
var T_GREATER = 38;
var T_ADD = 11;
var T_SUBTRACT = 52;
var T_MULT = 13;
var T_DIV = 14;
var T_MOD = 32;
var T_AVERAGE = 33;
var T_SQRT = 34;
var T_HYPOT = 35;
var T_GOTO = 16;
var T_NOT = 28;
var T_CONDITION = 103;
var T_ELSE = 102;
var T_DO = 101;
var T_OUTLET = 104;
var T_ASSIGN = 42;
var T_CONSOLE = 2;
var T_PRINT = 27;

var mobileHack = false;

var notStartOrConsole = [T_COMMENT, T_CONST, T_BLOCK, T_VAR, T_INPUT, T_IF, T_WHILE, T_EQUAL, T_LESS, T_GREATER, T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD, T_GOTO, T_NOT, T_CONDITION, T_ELSE, T_DO, T_OUTLET, T_ASSIGN, T_PRINT, T_AVERAGE, T_SQRT, T_HYPOT];
var notStartOrConsoleOrSpecial = [T_COMMENT, T_CONST, T_BLOCK, T_VAR, T_INPUT, T_IF, T_WHILE, T_EQUAL, T_LESS, T_GREATER, T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD, T_GOTO, T_NOT, T_ASSIGN, T_PRINT, T_AVERAGE, T_SQRT, T_HYPOT];
var notStartOrConsoleOrOutlet = [T_COMMENT, T_CONST, T_BLOCK, T_VAR, T_INPUT, T_IF, T_WHILE, T_EQUAL, T_LESS, T_GREATER, T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD, T_GOTO, T_NOT, T_CONDITION, T_ELSE, T_DO, T_ASSIGN, T_PRINT, T_AVERAGE, T_SQRT, T_HYPOT];
var numberyOnes = [T_COMMENT, T_OUTLET, T_CONST, T_VAR, T_INPUT, T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD, T_AVERAGE, T_SQRT, T_HYPOT];
var boolyOnes = [T_COMMENT, T_OUTLET, T_NOT, T_EQUAL, T_GREATER, T_LESS];

var mathFunctions = [T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD, T_AVERAGE, T_SQRT, T_HYPOT];
var boolFunctions = [T_NOT, T_EQUAL, T_GREATER, T_LESS];
var utilities = [T_COMMENT, T_PRINT];
var conditionals = [T_IF, T_WHILE];
var containers = [T_BLOCK, T_CONST, T_INPUT];
var handles = [T_GOTO, T_VAR];


var blockConfig = {};
blockConfig[T_BLOCK] = {};
blockConfig[T_GOTO] = {};
blockConfig[T_VAR] = {};
blockConfig[T_INPUT] = {};
blockConfig[T_IF] = {};
blockConfig[T_WHILE] = {};
blockConfig[T_EQUAL] = {};
blockConfig[T_LESS] = {};
blockConfig[T_GREATER] = {};
blockConfig[T_ADD] = {};
blockConfig[T_HYPOT] = {};
blockConfig[T_AVERAGE] = {};
blockConfig[T_SQRT] = {};
blockConfig[T_SUBTRACT] = {};
blockConfig[T_MULT] = {};
blockConfig[T_DIV] = {};
blockConfig[T_MOD] = {};
blockConfig[T_NOT] = {};
blockConfig[T_CONDITION] = {};
blockConfig[T_ELSE] = {};
blockConfig[T_DO] = {};
blockConfig[T_OUTLET] = {};
blockConfig[T_START] = {};
blockConfig[T_STOP] = {};
blockConfig[T_ASSIGN] = {};
blockConfig[T_CONSOLE] = {};
blockConfig[T_PRINT] = {};
blockConfig[T_COMMENT] = {};
blockConfig[T_CONST] = {};

blockConfig[T_BLOCK]['block label'] = "set block";
blockConfig[T_GOTO]['block label'] = "block";
blockConfig[T_VAR]['block label'] = "variable";
blockConfig[T_INPUT]['block label'] = "set variable";
blockConfig[T_IF]['block label'] = "if";
blockConfig[T_WHILE]['block label'] = "while";
blockConfig[T_EQUAL]['block label'] = "equal";
blockConfig[T_LESS]['block label'] = "less";
blockConfig[T_GREATER]['block label'] = "greater";
blockConfig[T_ADD]['block label'] = "add";
blockConfig[T_AVERAGE]['block label'] = "average";
blockConfig[T_SQRT]['block label'] = "sqrt";
blockConfig[T_HYPOT]['block label'] = "hypot";
blockConfig[T_SUBTRACT]['block label'] = "subtract";
blockConfig[T_MULT]['block label'] = "multiply";
blockConfig[T_DIV]['block label'] = "divide";
blockConfig[T_MOD]['block label'] = "modulus";
blockConfig[T_NOT]['block label'] = "not";
blockConfig[T_CONDITION]['block label'] = "condition";
blockConfig[T_ELSE]['block label'] = "else";
blockConfig[T_DO]['block label'] = "do";
blockConfig[T_OUTLET]['block label'] = "out";
blockConfig[T_START]['block label'] = "start";
blockConfig[T_STOP]['block label'] = "stop";
blockConfig[T_ASSIGN]['block label'] = "assign";
blockConfig[T_CONSOLE]['block label'] = "console";
blockConfig[T_PRINT]['block label'] = "print";
blockConfig[T_COMMENT]['block label'] = "//";
blockConfig[T_CONST]['block label'] = "constant";

blockConfig[T_BLOCK]['accept child'] = notStartOrConsoleOrSpecial;
blockConfig[T_VAR]['accept child'] = [T_COMMENT]; //nothing
blockConfig[T_INPUT]['accept child'] = [T_COMMENT]; //nothing
blockConfig[T_IF]['accept child'] = [T_CONDITION, T_DO, T_ELSE, T_COMMENT];
blockConfig[T_WHILE]['accept child'] = [T_CONDITION, T_DO, T_ELSE, T_COMMENT];
blockConfig[T_EQUAL]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT, T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD];
blockConfig[T_LESS]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT, T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD];
blockConfig[T_GREATER]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT, T_ADD, T_SUBTRACT, T_MULT, T_DIV, T_MOD];
blockConfig[T_ADD]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_AVERAGE]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_SQRT]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_SUBTRACT]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_MULT]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_DIV]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_HYPOT]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_MOD]['accept child'] = numberyOnes;//[T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_GOTO]['accept child'] = [T_COMMENT];
blockConfig[T_NOT]['accept child'] = [T_OUTLET, T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_CONDITION]['accept child'] = [T_LESS, T_GREATER, T_NOT, T_EQUAL, T_COMMENT];
blockConfig[T_ELSE]['accept child'] = notStartOrConsole;
blockConfig[T_DO]['accept child'] = notStartOrConsole;
blockConfig[T_OUTLET]['accept child'] = [T_COMMENT];
blockConfig[T_START]['accept child'] = notStartOrConsoleOrSpecial;
blockConfig[T_STOP]['accept child'] = [];
blockConfig[T_ASSIGN]['accept child'] = [T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_CONSOLE]['accept child'] = [];
blockConfig[T_PRINT]['accept child'] = [T_VAR, T_INPUT, T_CONST, T_COMMENT];
blockConfig[T_COMMENT]['accept child'] = [];
blockConfig[T_CONST]['accept child'] = [T_COMMENT];

var I_NONE = 0;
var I_TEXT = 1;
var I_SELECT = 2;
var I_TEXT_AREA = 3;
blockConfig[T_BLOCK]['input type'] = I_TEXT;
blockConfig[T_GOTO]['input type'] = I_SELECT;
blockConfig[T_VAR]['input type'] = I_SELECT;
blockConfig[T_INPUT]['input type'] = I_TEXT;
blockConfig[T_IF]['input type'] = I_NONE;
blockConfig[T_WHILE]['input type'] = I_NONE;
blockConfig[T_EQUAL]['input type'] = I_NONE;
blockConfig[T_LESS]['input type'] = I_NONE;
blockConfig[T_GREATER]['input type'] = I_NONE;
blockConfig[T_ADD]['input type'] = I_NONE;
blockConfig[T_AVERAGE]['input type'] = I_NONE;
blockConfig[T_SQRT]['input type'] = I_NONE;
blockConfig[T_SUBTRACT]['input type'] = I_NONE;
blockConfig[T_MULT]['input type'] = I_NONE;
blockConfig[T_DIV]['input type'] = I_NONE;
blockConfig[T_MOD]['input type'] = I_NONE;
blockConfig[T_HYPOT]['input type'] = I_NONE;
blockConfig[T_NOT]['input type'] = I_NONE;
blockConfig[T_CONDITION]['input type'] = I_NONE;
blockConfig[T_ELSE]['input type'] = I_NONE;
blockConfig[T_DO]['input type'] = I_NONE;
blockConfig[T_OUTLET]['input type'] = I_NONE;
blockConfig[T_START]['input type'] = I_NONE;
blockConfig[T_STOP]['input type'] = I_NONE;
blockConfig[T_ASSIGN]['input type'] = I_NONE;
blockConfig[T_CONSOLE]['input type'] = I_NONE;
blockConfig[T_PRINT]['input type'] = I_NONE;
blockConfig[T_COMMENT]['input type'] = I_TEXT_AREA;
blockConfig[T_CONST]['input type'] = I_TEXT;

blockConfig[T_BLOCK]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : true};
blockConfig[T_GOTO]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : true};
blockConfig[T_VAR]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : true};
blockConfig[T_INPUT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : true};
blockConfig[T_IF]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_WHILE, 'copy' : false};
blockConfig[T_WHILE]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_IF, 'copy' : false};
blockConfig[T_EQUAL]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_LESS, 'copy' : false};
blockConfig[T_LESS]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_GREATER, 'copy' : false};
blockConfig[T_GREATER]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_EQUAL, 'copy' : false};
blockConfig[T_ADD]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_SUBTRACT, 'copy' : false};
blockConfig[T_SUBTRACT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_MULT, 'copy' : false};
blockConfig[T_MULT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_DIV, 'copy' : false};
blockConfig[T_DIV]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_MOD, 'copy' : false};
blockConfig[T_MOD]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_AVERAGE, 'copy' : false};
blockConfig[T_AVERAGE]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_SQRT, 'copy' : false};
blockConfig[T_SQRT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_HYPOT, 'copy' : false};
blockConfig[T_HYPOT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_ADD, 'copy' : false};
blockConfig[T_NOT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : false};
blockConfig[T_CONDITION]['handles'] = {'move' : false, 'resize'  : true, 'delete'  : false, 'expand'  : true, 'mutate' : -1, 'copy' : false};
blockConfig[T_ELSE]['handles'] = {'move' : false, 'resize'  : true, 'delete'  : false, 'expand'  : true, 'mutate' : -1, 'copy' : false};
blockConfig[T_DO]['handles'] = {'move' : false, 'resize'  : true, 'delete'  : false, 'expand'  : true, 'mutate' : -1, 'copy' : false};
blockConfig[T_OUTLET]['handles'] = {'move' : false, 'resize'  : true, 'delete'  : false, 'expand'  : false, 'mutate' : -1, 'copy' : false};
blockConfig[T_START]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : false, 'expand'  : true, 'mutate' : -1, 'copy' : false};
blockConfig[T_STOP]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : false};
blockConfig[T_ASSIGN]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : true};
blockConfig[T_CONSOLE]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : false, 'mutate' : -1, 'copy' : false};
blockConfig[T_PRINT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : -1, 'copy' : true};
blockConfig[T_COMMENT]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : false, 'mutate' : -1, 'copy' : true};
blockConfig[T_CONST]['handles'] = {'move' : true, 'resize'  : true, 'delete'  : true, 'expand'  : true, 'mutate' : T_INPUT, 'copy' : true};
